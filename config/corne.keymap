/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_da.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };
    };

    //

    macros {
        tmux_p1: tmux_p1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DA_S) &kp DA_N1>;
            label = "TMUX_P1";
        };

        tmux_p2: tmux_p2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DA_S) &kp DA_N2>;
            label = "TMUX_P2";
        };

        tmux_p3: tmux_p3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DA_S) &kp DA_N3>;
            label = "TMUX_P3";
        };

        tmux_p4: tmux_p4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DA_S) &kp DA_N4>;
            label = "TMUX_P4";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <10 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&none  &kp Q               &kp W              &kp E                  &kp R                &kp T        &kp Y    &kp U                 &kp I                   &kp O               &kp P                           &none
&none  &hm LEFT_META DA_A  &hm LEFT_ALT DA_S  &hm LEFT_CONTROL DA_D  &hm LEFT_SHIFT DA_F  &kp G        &kp H    &hm RIGHT_SHIFT DA_J  &hm RIGHT_CONTROL DA_K  &hm RIGHT_ALT DA_L  &hm RIGHT_META DA_SINGLE_QUOTE  &none
&none  &lt 4 DA_Z          &kp X              &kp C                  &kp V                &kp B        &kp N    &kp M                 &kp DA_COMMA            &kp DA_PERIOD       &kp DA_MINUS                    &none
                                              &lt 4 ESCAPE           &lt 2 TAB            &kp SPACE    &kp RET  &lt 1 BACKSPACE       &kp LC(BACKSPACE)
            >;
        };

        left {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "left";
            bindings = <
&none  &kp DA_EXCLAMATION  &kp LS(DA_N2)   &kp DA_HASH               &kp DA_LT          &kp DA_PERCENT          &kp DA_AMPERSAND   &kp DA_FSLH        &kp DA_EQUAL       &kp DA_QUESTION  &kp DA_ACUTE   &none
&none  &kp DA_A_RING       &kp DA_AE       &kp DA_LEFT_PARENTHESIS   &kp LA(LS(DA_N8))  &kp DA_LEFT_BRACKET     &kp RA(DA_SQT)     &kp RIGHT_SHIFT    &kp RIGHT_CONTROL  &kp RIGHT_ALT    &kp RIGHT_GUI  &none
&none  &kp DA_ONE_HALF     &kp DA_O_SLASH  &kp DA_RIGHT_PARENTHESIS  &kp LS(LA(DA_N9))  &kp DA_RIGHT_BRACKET    &kp LA(LS(DA_N7))  &kp DA_UNDERSCORE  &kp DA_PLUS        &kp LA(DA_I)     &kp DA_TILDE   &none
                                           &trans                    &trans             &trans                  &trans             &trans             &trans
            >;
        };

        right {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "right";
            bindings = <
&none  &kp F1        &kp F2        &kp F3            &kp F4          &kp F5     &kp F6    &kp F7         &kp F8       &kp F9     &kp F10  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp ESC    &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT  &kp F11  &none
&none  &none         &none         &none             &none           &none      &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp F12  &none
                                   &trans            &trans          &trans     &trans    &trans         &trans
            >;
        };

        tri {
            bindings = <
&none  &tmux_p1      &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none           &kp DA_PLUS   &kp DA_N7  &kp DA_N8     &kp DA_N9  &kp LS(DA_SQT)  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL   &kp LEFT_SHIFT   &none           &kp DA_MINUS  &kp DA_N4  &kp NUMBER_5  &kp DA_N6  &kp DA_SLASH    &none
&none  &none         &none         &bt BT_SEL 2       &bt BT_SEL 1     &bt BT_SEL 0    &kp DA_N0     &kp DA_N1  &kp DA_N2     &kp DA_N3  &none           &none
                                   &trans             &trans           &trans          &trans        &trans     &trans
            >;
        };

        layer3trigger {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri {
            if-layers = <1 2>;
            then-layer = <3>;
        };

        l3 {
            if-layers = <4>;
            then-layer = <3>;
        };
    };
};
